#  SPDX-FileCopyrightText: Copyright (c) "2024" NVIDIA CORPORATION & AFFILIATES. All rights reserved.
#  SPDX-License-Identifier: Apache-2.0
#
#  Licensed under the Apache License, Version 2.0 (the "License")
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# Generated by Django 3.2.25 on 2024-06-28 15:07
import uuid

from django.core.serializers.json import DjangoJSONEncoder
from django.core.validators import MinValueValidator
from django.db import migrations, models
from django.db.models import deletion
from nautobot.core.models.fields import NaturalOrderingField
from nautobot.core.models.ordering import naturalize
from nautobot.extras.models.mixins import DynamicGroupMixin, NotesMixin
from nautobot.extras.models.statuses import StatusField
from taggit.managers import TaggableManager

_NAME: tuple[str, NaturalOrderingField] = (
    '_name',
    NaturalOrderingField(
        'name',
        blank=True,
        db_index=True,
        max_length=255,
        naturalize_function=naturalize,
    ),
)
CF_DATA: tuple[str, models.JSONField] = (
    '_custom_field_data',
    models.JSONField(
        blank=True,
        default=dict,
        encoder=DjangoJSONEncoder,
    ),
)
CREATED: tuple[str, models.DateField] = ('created', models.DateField(auto_now_add=True, null=True))
ID: tuple[str, models.UUIDField] = (
    'id',
    models.UUIDField(
        default=uuid.uuid4,
        editable=False,
        primary_key=True,
        serialize=False,
        unique=True,
    ),
)
UPDATED: tuple[str, models.DateTimeField] = (
    'last_updated',
    models.DateTimeField(
        auto_now=True,
        null=True,),
)


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('dcim', '0023_interface_redundancy_group_data_migration'),
        ('extras', '0058_jobresult_add_time_status_idxs'),
    ]

    operations = [
        migrations.CreateModel(
            name='RAMModuleType',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(max_length=100)),
                _NAME,
                ('part_number', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('comments', models.TextField(blank=True)),
                ('module_type', models.CharField(default='u', max_length=4)),
                ('technology', models.CharField(default='ddr5', max_length=8)),
                (
                    'speed',
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[MinValueValidator(1)],
                    ),
                ),
                (
                    'capacity',
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[MinValueValidator(1)],
                    ),
                ),
                (
                    'quantity',
                    models.PositiveSmallIntegerField(
                        default=1,
                        validators=[MinValueValidator(1)],
                    ),
                ),
                (
                    'manufacturer',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='%(class)ss',
                        to='dcim.manufacturer',
                    ),
                ),
                ('tags', TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'RAM Module Type',
                'verbose_name_plural': 'RAM Module Types',
                'ordering': ['manufacturer', '_name', 'part_number'],
                'abstract': False,
                'unique_together': {('part_number', 'manufacturer')},
            },
            bases=(models.Model, DynamicGroupMixin, NotesMixin),
        ),
        migrations.CreateModel(
            name='PSUType',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(max_length=100)),
                _NAME,
                ('part_number', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('comments', models.TextField(blank=True)),
                ('feed_type', models.CharField(default='dc', max_length=16)),
                (
                    'power_provided',
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[MinValueValidator(1)],
                    ),
                ),
                ('required_voltage', models.CharField(blank=True, max_length=32)),
                ('hot_swappable', models.BooleanField(default=False)),
                (
                    'manufacturer',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='%(class)ss',
                        to='dcim.manufacturer',
                    ),
                ),
                ('tags', TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'PSU Type',
                'verbose_name_plural': 'PSU Types',
                'ordering': ['manufacturer', '_name', 'part_number'],
                'abstract': False,
                'unique_together': {('part_number', 'manufacturer')},
            },
            bases=(models.Model, DynamicGroupMixin, NotesMixin),
        ),
        migrations.CreateModel(
            name='OtherFSUType',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(max_length=100)),
                _NAME,
                ('part_number', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('comments', models.TextField(blank=True)),
                (
                    'manufacturer',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='%(class)ss',
                        to='dcim.manufacturer',
                    ),
                ),
                ('tags', TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'Other FSU Type',
                'verbose_name_plural': 'Other FSU Types',
                'ordering': ['manufacturer', '_name', 'part_number'],
                'abstract': False,
                'unique_together': {('part_number', 'manufacturer')},
            },
            bases=(models.Model, DynamicGroupMixin, NotesMixin),
        ),
        migrations.CreateModel(
            name='NICType',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(max_length=100)),
                _NAME,
                ('part_number', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('comments', models.TextField(blank=True)),
                ('interface_count', models.PositiveSmallIntegerField(blank=True, null=True)),
                (
                    'manufacturer',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='%(class)ss',
                        to='dcim.manufacturer',
                    ),
                ),
                ('tags', TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'NIC Type',
                'verbose_name_plural': 'NIC Types',
                'ordering': ['manufacturer', '_name', 'part_number'],
                'abstract': False,
                'unique_together': {('part_number', 'manufacturer')},
            },
            bases=(models.Model, DynamicGroupMixin, NotesMixin),
        ),
        migrations.CreateModel(
            name='MainboardType',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(max_length=100)),
                _NAME,
                ('part_number', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('comments', models.TextField(blank=True)),
                (
                    'cpu_socket_count',
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[MinValueValidator(1)],
                    ),
                ),
                (
                    'manufacturer',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='%(class)ss',
                        to='dcim.manufacturer',
                    ),
                ),
                ('tags', TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'Mainboard Type',
                'verbose_name_plural': 'Mainboard Types',
                'ordering': ['manufacturer', '_name', 'part_number'],
                'abstract': False,
                'unique_together': {('part_number', 'manufacturer')},
            },
            bases=(models.Model, DynamicGroupMixin, NotesMixin),
        ),
        migrations.CreateModel(
            name='Mainboard',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(db_index=True, max_length=100)),
                _NAME,
                ('serial_number', models.CharField(blank=True, db_index=True, max_length=255)),
                ('firmware_version', models.CharField(blank=True, max_length=32)),
                ('driver_version', models.CharField(blank=True, max_length=32)),
                ('driver_name', models.CharField(blank=True, max_length=100)),
                ('asset_tag', models.CharField(blank=True, max_length=255)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('comments', models.TextField(blank=True)),
                (
                    'device',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.device',
                    ),
                ),
                (
                    'fsu_type',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='instances',
                        to='nautobot_fsus.mainboardtype',
                    ),
                ),
                (
                    'location',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.location',
                    ),
                ),
                (
                    'status',
                    StatusField(
                        null=True,
                        on_delete=deletion.PROTECT,
                        related_name='%(app_label)s_%(class)s_related',
                        to='extras.status',
                    ),
                ),
                ('tags', TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'Mainboard',
                'verbose_name_plural': 'Mainboards',
                'ordering': ['device', 'location', '_name'],
                'abstract': False,
                'unique_together': {('device', 'name'), ('location', 'name')},
            },
            bases=(models.Model, DynamicGroupMixin, NotesMixin),
        ),
        migrations.CreateModel(
            name='HBAType',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(max_length=100)),
                _NAME,
                ('part_number', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('comments', models.TextField(blank=True)),
                (
                    'manufacturer',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='%(class)ss',
                        to='dcim.manufacturer',
                    ),
                ),
                ('tags', TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'HBA Type',
                'verbose_name_plural': 'HBA Types',
                'ordering': ['manufacturer', '_name', 'part_number'],
                'abstract': False,
                'unique_together': {('part_number', 'manufacturer')},
            },
            bases=(models.Model, DynamicGroupMixin, NotesMixin),
        ),
        migrations.CreateModel(
            name='HBA',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(db_index=True, max_length=100)),
                _NAME,
                ('serial_number', models.CharField(blank=True, db_index=True, max_length=255)),
                ('firmware_version', models.CharField(blank=True, max_length=32)),
                ('driver_version', models.CharField(blank=True, max_length=32)),
                ('driver_name', models.CharField(blank=True, max_length=100)),
                ('asset_tag', models.CharField(blank=True, max_length=255)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('comments', models.TextField(blank=True)),
                ('pci_slot_id', models.CharField(blank=True, max_length=100)),
                (
                    'device',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.device',
                    ),
                ),
                (
                    'fsu_type',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='instances',
                        to='nautobot_fsus.hbatype',
                    ),
                ),
                (
                    'location',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.location',
                    ),
                ),
                (
                    'status',
                    StatusField(
                        null=True,
                        on_delete=deletion.PROTECT,
                        related_name='%(app_label)s_%(class)s_related',
                        to='extras.status',
                    ),
                ),

                ('tags', TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'HBA',
                'verbose_name_plural': 'HBAs',
                'ordering': ['device', 'location', '_name'],
                'abstract': False,
                'unique_together': {('device', 'name'), ('location', 'name')},
            },
            bases=(models.Model, DynamicGroupMixin, NotesMixin),
        ),
        migrations.CreateModel(
            name='GPUType',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(max_length=100)),
                _NAME,
                ('part_number', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('comments', models.TextField(blank=True)),
                (
                    'manufacturer',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='%(class)ss',
                        to='dcim.manufacturer',
                    ),
                ),

                ('tags', TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'GPU Type',
                'verbose_name_plural': 'GPU Types',
                'ordering': ['manufacturer', '_name', 'part_number'],
                'abstract': False,
                'unique_together': {('part_number', 'manufacturer')},
            },
            bases=(models.Model, DynamicGroupMixin, NotesMixin),
        ),
        migrations.CreateModel(
            name='GPUBaseboardType',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(max_length=100)),
                _NAME,
                ('part_number', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('comments', models.TextField(blank=True)),
                ('slot_count', models.PositiveSmallIntegerField(blank=True, null=True)),
                (
                    'manufacturer',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='%(class)ss',
                        to='dcim.manufacturer',
                    ),
                ),

                ('tags', TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'GPU Baseboard Type',
                'verbose_name_plural': 'GPU Baseboard Types',
                'ordering': ['manufacturer', '_name', 'part_number'],
                'abstract': False,
                'unique_together': {('part_number', 'manufacturer')},
            },
            bases=(models.Model, DynamicGroupMixin, NotesMixin),
        ),
        migrations.CreateModel(
            name='GPUBaseboard',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(db_index=True, max_length=100)),
                _NAME,
                ('serial_number', models.CharField(blank=True, db_index=True, max_length=255)),
                ('firmware_version', models.CharField(blank=True, max_length=32)),
                ('driver_version', models.CharField(blank=True, max_length=32)),
                ('driver_name', models.CharField(blank=True, max_length=100)),
                ('asset_tag', models.CharField(blank=True, max_length=255)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('comments', models.TextField(blank=True)),
                (
                    'device',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.device',
                    ),
                ),

                (
                    'fsu_type',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='instances',
                        to='nautobot_fsus.gpubaseboardtype',
                    ),
                ),

                (
                    'location',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.location',
                    ),
                ),

                (
                    'status',
                    StatusField(
                        null=True,
                        on_delete=deletion.PROTECT,
                        related_name='%(app_label)s_%(class)s_related',
                        to='extras.status',
                    ),
                ),

                ('tags', TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'GPU Baseboard',
                'verbose_name_plural': 'GPU Baseboards',
                'ordering': ['device', 'location', '_name'],
                'abstract': False,
                'unique_together': {('device', 'name'), ('location', 'name')},
            },
            bases=(models.Model, DynamicGroupMixin, NotesMixin),
        ),
        migrations.CreateModel(
            name='FanType',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(max_length=100)),
                _NAME,
                ('part_number', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('comments', models.TextField(blank=True)),
                (
                    'manufacturer',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='%(class)ss',
                        to='dcim.manufacturer',
                    ),
                ),

                ('tags', TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'Fan Type',
                'verbose_name_plural': 'Fan Types',
                'ordering': ['manufacturer', '_name', 'part_number'],
                'abstract': False,
                'unique_together': {('part_number', 'manufacturer')},
            },
            bases=(models.Model, DynamicGroupMixin, NotesMixin),
        ),
        migrations.CreateModel(
            name='DiskType',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(max_length=100)),
                _NAME,
                ('part_number', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('comments', models.TextField(blank=True)),
                ('disk_type', models.CharField(default='SSD', max_length=4)),
                (
                    'size',
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[MinValueValidator(1)],
                    ),
                ),
                (
                    'manufacturer',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='%(class)ss',
                        to='dcim.manufacturer',
                    ),
                ),

                ('tags', TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'Disk Type',
                'verbose_name_plural': 'Disk Types',
                'ordering': ['manufacturer', '_name', 'part_number'],
                'abstract': False,
                'unique_together': {('part_number', 'manufacturer')},
            },
            bases=(models.Model, DynamicGroupMixin, NotesMixin),
        ),
        migrations.CreateModel(
            name='CPUType',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(max_length=100)),
                _NAME,
                ('part_number', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('comments', models.TextField(blank=True)),
                ('architecture', models.CharField(default='x86', max_length=4)),
                (
                    'cpu_speed',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[MinValueValidator(0.0)],
                    ),
                ),
                ('cores', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('pcie_generation', models.PositiveSmallIntegerField(blank=True, null=True)),
                (
                    'manufacturer',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='%(class)ss',
                        to='dcim.manufacturer',
                    ),
                ),
                ('tags', TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'CPU Type',
                'verbose_name_plural': 'CPU Types',
                'ordering': ['manufacturer', '_name', 'part_number'],
                'abstract': False,
                'unique_together': {('part_number', 'manufacturer')},
            },
            bases=(models.Model, DynamicGroupMixin, NotesMixin),
        ),
        migrations.CreateModel(
            name='RAMModuleTemplate',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(db_index=True, max_length=100)),
                _NAME,
                ('description', models.CharField(blank=True, max_length=255)),
                ('slot_id', models.CharField(blank=True, max_length=16)),
                (
                    'device_type',
                    models.ForeignKey(
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.devicetype',
                    ),
                ),
                (
                    'fsu_type',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='templates',
                        to='nautobot_fsus.rammoduletype',
                    ),
                ),
            ],
            options={
                'verbose_name': 'RAM Module Template',
                'verbose_name_plural': 'RAM Module Templates',
                'ordering': ['device_type', '_name'],
                'abstract': False,
                'unique_together': {('name', 'device_type')},
            },
        ),
        migrations.CreateModel(
            name='RAMModule',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(db_index=True, max_length=100)),
                _NAME,
                ('serial_number', models.CharField(blank=True, db_index=True, max_length=255)),
                ('firmware_version', models.CharField(blank=True, max_length=32)),
                ('driver_version', models.CharField(blank=True, max_length=32)),
                ('driver_name', models.CharField(blank=True, max_length=100)),
                ('asset_tag', models.CharField(blank=True, max_length=255)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('comments', models.TextField(blank=True)),
                ('slot_id', models.CharField(blank=True, max_length=16)),
                (
                    'device',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.device',
                    ),
                ),
                (
                    'fsu_type',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='instances',
                        to='nautobot_fsus.rammoduletype',
                    ),
                ),
                (
                    'location',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.location',
                    ),
                ),
                (
                    'status',
                    StatusField(
                        null=True,
                        on_delete=deletion.PROTECT,
                        related_name='%(app_label)s_%(class)s_related',
                        to='extras.status',
                    ),
                ),
                ('tags', TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'RAM Module',
                'verbose_name_plural': 'RAM Modules',
                'ordering': ['device', 'location', '_name'],
                'abstract': False,
                'unique_together': {('device', 'name'), ('location', 'name')},
            },
            bases=(models.Model, DynamicGroupMixin, NotesMixin),
        ),
        migrations.CreateModel(
            name='PSUTemplate',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(db_index=True, max_length=100)),
                _NAME,
                ('description', models.CharField(blank=True, max_length=255)),
                ('redundant', models.BooleanField(default=False)),
                (
                    'device_type',
                    models.ForeignKey(
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.devicetype',
                    ),
                ),
                (
                    'fsu_type',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='templates',
                        to='nautobot_fsus.psutype',
                    ),
                ),
            ],
            options={
                'verbose_name': 'PSU Template',
                'verbose_name_plural': 'PSU Templates',
                'ordering': ['device_type', '_name'],
                'abstract': False,
                'unique_together': {('name', 'device_type')},
            },
        ),
        migrations.CreateModel(
            name='PSU',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(db_index=True, max_length=100)),
                _NAME,
                ('serial_number', models.CharField(blank=True, db_index=True, max_length=255)),
                ('firmware_version', models.CharField(blank=True, max_length=32)),
                ('driver_version', models.CharField(blank=True, max_length=32)),
                ('driver_name', models.CharField(blank=True, max_length=100)),
                ('asset_tag', models.CharField(blank=True, max_length=255)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('comments', models.TextField(blank=True)),
                ('redundant', models.BooleanField(default=False)),
                (
                    'device',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.device',
                    ),
                ),
                (
                    'fsu_type',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='instances',
                        to='nautobot_fsus.psutype',
                    ),
                ),
                (
                    'location',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.location',
                    ),
                ),
                (
                    'power_ports',
                    models.ManyToManyField(
                        blank=True,
                        related_name='parent_psu',
                        to='dcim.PowerPort',
                    ),
                ),
                (
                    'status', StatusField(
                        null=True,
                        on_delete=deletion.PROTECT,
                        related_name='%(app_label)s_%(class)s_related',
                        to='extras.status',
                    ),
                ),
                ('tags', TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'PSU',
                'verbose_name_plural': 'PSUs',
                'ordering': ['device', 'location', '_name'],
                'abstract': False,
                'unique_together': {('device', 'name'), ('location', 'name')},
            },
            bases=(models.Model, DynamicGroupMixin, NotesMixin),
        ),
        migrations.CreateModel(
            name='OtherFSUTemplate',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(db_index=True, max_length=100)),
                _NAME,
                ('description', models.CharField(blank=True, max_length=255)),
                (
                    'device_type',
                    models.ForeignKey(
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.devicetype',
                    ),
                ),
                (
                    'fsu_type',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='templates',
                        to='nautobot_fsus.otherfsutype',
                    ),
                ),
            ],
            options={
                'verbose_name': 'OtherFSU Template',
                'verbose_name_plural': 'OtherFSU Templates',
                'ordering': ['device_type', '_name'],
                'abstract': False,
                'unique_together': {('name', 'device_type')},
            },
        ),
        migrations.CreateModel(
            name='OtherFSU',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(db_index=True, max_length=100)),
                _NAME,
                ('serial_number', models.CharField(blank=True, db_index=True, max_length=255)),
                ('firmware_version', models.CharField(blank=True, max_length=32)),
                ('driver_version', models.CharField(blank=True, max_length=32)),
                ('driver_name', models.CharField(blank=True, max_length=100)),
                ('asset_tag', models.CharField(blank=True, max_length=255)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('comments', models.TextField(blank=True)),
                (
                    'device',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.device',
                    ),
                ),
                (
                    'fsu_type',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='instances',
                        to='nautobot_fsus.otherfsutype',
                    ),
                ),
                (
                    'location',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.location',
                    ),
                ),
                (
                    'status',
                    StatusField(
                        null=True,
                        on_delete=deletion.PROTECT,
                        related_name='%(app_label)s_%(class)s_related',
                        to='extras.status',
                    ),
                ),
                ('tags', TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'OtherFSU',
                'verbose_name_plural': 'OtherFSUs',
                'ordering': ['device', 'location', '_name'],
                'abstract': False,
                'unique_together': {('device', 'name'), ('location', 'name')},
            },
            bases=(models.Model, DynamicGroupMixin, NotesMixin),
        ),
        migrations.CreateModel(
            name='NICTemplate',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(db_index=True, max_length=100)),
                _NAME,
                ('description', models.CharField(blank=True, max_length=255)),
                ('pci_slot_id', models.CharField(blank=True, max_length=100)),
                (
                    'device_type',
                    models.ForeignKey(
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.devicetype',
                    ),
                ),
                (
                    'fsu_type',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='templates',
                        to='nautobot_fsus.nictype',
                    ),
                ),
            ],
            options={
                'verbose_name': 'NIC Template',
                'verbose_name_plural': 'NIC Templates',
                'ordering': ['device_type', '_name'],
                'abstract': False,
                'unique_together': {('name', 'device_type')},
            },
        ),
        migrations.CreateModel(
            name='NIC',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(db_index=True, max_length=100)),
                _NAME,
                ('serial_number', models.CharField(blank=True, db_index=True, max_length=255)),
                ('firmware_version', models.CharField(blank=True, max_length=32)),
                ('driver_version', models.CharField(blank=True, max_length=32)),
                ('driver_name', models.CharField(blank=True, max_length=100)),
                ('asset_tag', models.CharField(blank=True, max_length=255)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('comments', models.TextField(blank=True)),
                ('pci_slot_id', models.CharField(blank=True, max_length=100)),
                (
                    'device',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.device',
                    ),
                ),
                (
                    'fsu_type',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='instances',
                        to='nautobot_fsus.nictype',
                    ),
                ),
                (
                    'interfaces',
                    models.ManyToManyField(
                        blank=True,
                        limit_choices_to={'type__n': ['bridge', 'lag', 'virtual']},
                        related_name='parent_nic',
                        to='dcim.Interface',
                    ),
                ),
                (
                    'location',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.location',
                    ),
                ),
                (
                    'status',
                    StatusField(
                        null=True,
                        on_delete=deletion.PROTECT,
                        related_name='%(app_label)s_%(class)s_related',
                        to='extras.status',
                    ),
                ),
                ('tags', TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'NIC',
                'verbose_name_plural': 'NICs',
                'ordering': ['device', 'location', '_name'],
                'abstract': False,
                'unique_together': {('device', 'name'), ('location', 'name')},
            },
            bases=(models.Model, DynamicGroupMixin, NotesMixin),
        ),
        migrations.CreateModel(
            name='MainboardTemplate',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(db_index=True, max_length=100)),
                _NAME,
                ('description', models.CharField(blank=True, max_length=255)),
                (
                    'device_type',
                    models.ForeignKey(
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.devicetype',
                    ),
                ),
                (
                    'fsu_type',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='templates',
                        to='nautobot_fsus.mainboardtype',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Mainboard Template',
                'verbose_name_plural': 'Mainboard Templates',
                'ordering': ['device_type', '_name'],
                'abstract': False,
                'unique_together': {('name', 'device_type')},
            },
        ),
        migrations.CreateModel(
            name='HBATemplate',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(db_index=True, max_length=100)),
                _NAME,
                ('description', models.CharField(blank=True, max_length=255)),
                ('pci_slot_id', models.CharField(blank=True, max_length=100)),
                (
                    'device_type',
                    models.ForeignKey(
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.devicetype',
                    ),
                ),
                (
                    'fsu_type',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='templates',
                        to='nautobot_fsus.hbatype',
                    ),
                ),
            ],
            options={
                'verbose_name': 'HBA Template',
                'verbose_name_plural': 'HBA Templates',
                'ordering': ['device_type', '_name'],
                'abstract': False,
                'unique_together': {('name', 'device_type')},
            },
        ),
        migrations.CreateModel(
            name='GPUTemplate',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(db_index=True, max_length=100)),
                _NAME,
                ('description', models.CharField(blank=True, max_length=255)),
                ('pci_slot_id', models.CharField(blank=True, max_length=100)),
                (
                    'device_type',
                    models.ForeignKey(
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.devicetype',
                    ),
                ),
                (
                    'fsu_type',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='templates',
                        to='nautobot_fsus.gputype',
                    ),
                ),
            ],
            options={
                'verbose_name': 'GPU Template',
                'verbose_name_plural': 'GPU Templates',
                'ordering': ['device_type', '_name'],
                'abstract': False,
                'unique_together': {('name', 'device_type')},
            },
        ),
        migrations.CreateModel(
            name='GPUBaseboardTemplate',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(db_index=True, max_length=100)),
                _NAME,
                ('description', models.CharField(blank=True, max_length=255)),
                (
                    'device_type',
                    models.ForeignKey(
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.devicetype',
                    ),
                ),
                (
                    'fsu_type',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='templates',
                        to='nautobot_fsus.gpubaseboardtype',
                    ),
                ),
            ],
            options={
                'verbose_name': 'GPU Baseboard Template',
                'verbose_name_plural': 'GPU Baseboard Templates',
                'ordering': ['device_type', '_name'],
                'abstract': False,
                'unique_together': {('name', 'device_type')},
            },
        ),
        migrations.CreateModel(
            name='GPU',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(db_index=True, max_length=100)),
                _NAME,
                ('serial_number', models.CharField(blank=True, db_index=True, max_length=255)),
                ('firmware_version', models.CharField(blank=True, max_length=32)),
                ('driver_version', models.CharField(blank=True, max_length=32)),
                ('driver_name', models.CharField(blank=True, max_length=100)),
                ('asset_tag', models.CharField(blank=True, max_length=255)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('comments', models.TextField(blank=True)),
                ('pci_slot_id', models.CharField(blank=True, max_length=100)),
                (
                    'device',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.device',
                    ),
                ),
                (
                    'fsu_type',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='instances',
                        to='nautobot_fsus.gputype',
                    ),
                ),
                (
                    'location',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.location',
                    ),
                ),
                (
                    'parent_gpubaseboard',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=deletion.PROTECT,
                        related_name='gpus',
                        to='nautobot_fsus.gpubaseboard',
                    ),
                ),
                (
                    'status',
                    StatusField(
                        null=True,
                        on_delete=deletion.PROTECT,
                        related_name='%(app_label)s_%(class)s_related',
                        to='extras.status',
                    ),
                ),
                ('tags', TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'GPU',
                'verbose_name_plural': 'GPUs',
                'ordering': ['device', 'location', '_name'],
                'abstract': False,
                'unique_together': {('device', 'name'), ('location', 'name')},
            },
            bases=(models.Model, DynamicGroupMixin, NotesMixin),
        ),
        migrations.CreateModel(
            name='FanTemplate',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(db_index=True, max_length=100)),
                _NAME,
                ('description', models.CharField(blank=True, max_length=255)),
                (
                    'device_type',
                    models.ForeignKey(
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.devicetype',
                    ),
                ),
                (
                    'fsu_type',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='templates',
                        to='nautobot_fsus.fantype',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Fan Template',
                'verbose_name_plural': 'Fan Templates',
                'ordering': ['device_type', '_name'],
                'abstract': False,
                'unique_together': {('name', 'device_type')},
            },
        ),
        migrations.CreateModel(
            name='Fan',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(db_index=True, max_length=100)),
                _NAME,
                ('serial_number', models.CharField(blank=True, db_index=True, max_length=255)),
                ('firmware_version', models.CharField(blank=True, max_length=32)),
                ('driver_version', models.CharField(blank=True, max_length=32)),
                ('driver_name', models.CharField(blank=True, max_length=100)),
                ('asset_tag', models.CharField(blank=True, max_length=255)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('comments', models.TextField(blank=True)),
                (
                    'device',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.device',
                    ),
                ),
                (
                    'fsu_type',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='instances',
                        to='nautobot_fsus.fantype',
                    ),
                ),
                (
                    'location',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.location',
                    ),
                ),
                (
                    'status',
                    StatusField(
                        null=True,
                        on_delete=deletion.PROTECT,
                        related_name='%(app_label)s_%(class)s_related',
                        to='extras.status',
                    ),
                ),
                ('tags', TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'Fan',
                'verbose_name_plural': 'Fans',
                'ordering': ['device', 'location', '_name'],
                'abstract': False,
                'unique_together': {('device', 'name'), ('location', 'name')},
            },
            bases=(models.Model, DynamicGroupMixin, NotesMixin),
        ),
        migrations.CreateModel(
            name='DiskTemplate',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(db_index=True, max_length=100)),
                _NAME,
                ('description', models.CharField(blank=True, max_length=255)),
                (
                    'device_type',
                    models.ForeignKey(
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.devicetype',
                    ),
                ),
                (
                    'fsu_type',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='templates',
                        to='nautobot_fsus.disktype',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Disk Template',
                'verbose_name_plural': 'Disk Templates',
                'ordering': ['device_type', '_name'],
                'abstract': False,
                'unique_together': {('name', 'device_type')},
            },
        ),
        migrations.CreateModel(
            name='Disk',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(db_index=True, max_length=100)),
                _NAME,
                ('serial_number', models.CharField(blank=True, db_index=True, max_length=255)),
                ('firmware_version', models.CharField(blank=True, max_length=32)),
                ('driver_version', models.CharField(blank=True, max_length=32)),
                ('driver_name', models.CharField(blank=True, max_length=100)),
                ('asset_tag', models.CharField(blank=True, max_length=255)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('comments', models.TextField(blank=True)),
                (
                    'device',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.device',
                    ),
                ),
                (
                    'fsu_type',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='instances',
                        to='nautobot_fsus.disktype',
                    ),
                ),
                (
                    'location',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.location',
                    ),
                ),
                (
                    'parent_hba',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=deletion.PROTECT,
                        related_name='disks',
                        to='nautobot_fsus.hba',
                    ),
                ),
                (
                    'status',
                    StatusField(
                        null=True,
                        on_delete=deletion.PROTECT,
                        related_name='%(app_label)s_%(class)s_related',
                        to='extras.status',
                    ),
                ),
                ('tags', TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'Disk',
                'verbose_name_plural': 'Disks',
                'ordering': ['device', 'location', '_name'],
                'abstract': False,
                'unique_together': {('device', 'name'), ('location', 'name')},
            },
            bases=(models.Model, DynamicGroupMixin, NotesMixin),
        ),
        migrations.CreateModel(
            name='CPUTemplate',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(db_index=True, max_length=100)),
                _NAME,
                ('description', models.CharField(blank=True, max_length=255)),
                (
                    'device_type',
                    models.ForeignKey(
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.devicetype',
                    ),
                ),
                (
                    'fsu_type',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='templates',
                        to='nautobot_fsus.cputype',
                    ),
                ),
            ],
            options={
                'verbose_name': 'CPU Template',
                'verbose_name_plural': 'CPU Templates',
                'ordering': ['device_type', '_name'],
                'abstract': False,
                'unique_together': {('name', 'device_type')},
            },
        ),
        migrations.CreateModel(
            name='CPU',
            fields=[
                ID,
                CREATED,
                UPDATED,
                CF_DATA,
                ('name', models.CharField(db_index=True, max_length=100)),
                _NAME,
                ('serial_number', models.CharField(blank=True, db_index=True, max_length=255)),
                ('firmware_version', models.CharField(blank=True, max_length=32)),
                ('driver_version', models.CharField(blank=True, max_length=32)),
                ('driver_name', models.CharField(blank=True, max_length=100)),
                ('asset_tag', models.CharField(blank=True, max_length=255)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('comments', models.TextField(blank=True)),
                (
                    'device',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.device',
                    ),
                ),
                (
                    'fsu_type',
                    models.ForeignKey(
                        on_delete=deletion.PROTECT,
                        related_name='instances',
                        to='nautobot_fsus.cputype',
                    ),
                ),
                (
                    'location',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='%(class)ss',
                        to='dcim.location',
                    ),
                ),
                (
                    'parent_mainboard',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=deletion.PROTECT,
                        related_name='cpus',
                        to='nautobot_fsus.mainboard',
                    ),
                ),
                (
                    'status',
                    StatusField(
                        null=True,
                        on_delete=deletion.PROTECT,
                        related_name='%(app_label)s_%(class)s_related',
                        to='extras.status',
                    ),
                ),
                ('tags', TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'CPU',
                'verbose_name_plural': 'CPUs',
                'ordering': ['device', 'location', '_name'],
                'abstract': False,
                'unique_together': {('device', 'name'), ('location', 'name')},
            },
            bases=(models.Model, DynamicGroupMixin, NotesMixin),
        ),
    ]

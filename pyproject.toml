[tool.poetry]
name = "nautobot-fsus"
version = "2.0.3a0"
description = "Field Serviceable Units for Nautobot"
authors = ["Mark Troyer <mtroyer@nvidia.com>"]
maintainers = ["Mark Troyer <mtroyer@nvidia.com>"]
license = "Apache-2.0"
readme = "README.md"
homepage = "https://github.com/NVIDIA/nautobot-app-fsus"
repository = "https://github.com/NVIDIA/nautobot-app-fsus"
documentation = "https://nvidia.github.io/nautobot-app-fsus/index.html"
keywords = ["nautobot", "nautobot-app", "nautobot-plugin"]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
include = [
    "nautobot_fsus/static/nautobot_fsus/**/*",
]
packages = [
    { include = "nautobot_fsus" },
]

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.dependencies]
# Used for local development
python = ">=3.10,<3.12"
nautobot = ">=2.0.0,<2.3"

[tool.poetry.group.dev.dependencies]
bandit = "^1.7.5"
celery-types = "^0.20.0"
coverage = "^7.2.7"
django-debug-toolbar = "^4.1.0"
django-slowtests = "^1.1.1"
django-types = "^0.18.0"
factory-boy = "~3.3.1"
flake8 = "^6.0.0"
flake8-bugbear = "^23.7.10"
invoke = "^2.1.3"
ipython = "^8.14.0"
junit2html = "^30.1.3"
mypy = "^1.4.1"
pydocstyle = "^6.3.0"
pylint = "^3.2.5"
pylint-django = "^2.5.3"
python-dotenv = "^1.0.1"
ruff = "^0.7.1"
toml = "^0.10.2"
types-factory-boy = "0.4.1"
types-graphene = "^0.22"
types-jsonschema = "^4.19.0.3"
types-toml = "^0.10.8.7"
unittest-xml-reporting = "^3.2.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.0"
mkdocs-include-markdown-plugin = "^6.2.2"
mkdocs-material = "^9.5.32"
mkdocs-version-annotations = "^1.0.0"
mkdocstrings-python = "^1.10.8"

[tool.pylint.main]
analyse-fallback-blocks = "no"
ignore=".venv"
jobs = 0
# Include the pylint_django plugin to avoid spurious warnings about Django patterns
# Include pylint_nautobot to prep for Nautobot v2 migration
load-plugins="pylint_django"
django-settings-module="nautobot_fsus.config"
py-version = "3.10"

[tool.pylint.basic]
class-attribute-naming-style = "snake_case"
good-names = ["i", "j", "k", "q", "v", "ex", "id", "pk", "Run", "logger", "_"]
# No docstrings required for private methods (Pylint default), or for test_ functions, or for inner Meta classes.
no-docstring-rgx="^(_|test_|Meta$)"
property-classes = ["abc.abstractproperty", "property"]
# Maintain the default behavior, disallowing TypeAliases that start or end with "T" or "Type",
# but allow CONSTANT names in addition to PascalCase.
# https://pylint.readthedocs.io/en/stable/user_guide/messages/convention/invalid-name.html#predefined-naming-patterns
typealias-rgx="^(?!T)[A-Z][A-Za-z]{2,}(?<!Type)(?<!T)$"

[tool.pylint.format]
ignore-long-lines = "^\\s*(# )?(from \\S+)?\\s?(import\\s)?(.+)?<?(http)?s?(://\\S+)?>?"

[tool.pylint.imports]
allow-wildcard-with-all = "no"

[tool.pylint.messages_control]
# Line length is checked by flake8 with flake8-bugbear
disable = [
    "raw-checker-failed",
    "bad-inline-option",
    "locally-disabled",
    "file-ignored",
    "suppressed-message",
    "useless-suppression",
    "deprecated-pragma",
    "use-symbolic-message-instead",
    "line-too-long",
    "duplicate-code",
    "too-many-ancestors",
    "fixme",
]

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "B",  # flake8-bugbear
    "D",  # pydocstyle
    "E",  # pycodestyle error
    "F",  # pyflakes
    "I",  # isort
    "PL", # pylint
    "S",  # bandit
    "W",  # pycodestyle warning
]
ignore = [
    # D105 enforces docstrings for magic methods, e.g. __str__(). It seems unnecessary.
    "D105",

    # warning: `one-blank-line-before-class` (D203) and `no-blank-line-before-class` (D211) are incompatible.
    "D203", # 1 blank line required before class docstring

    # D212 is enabled by default in google convention, and complains if we have a docstring like:
    # """
    # My docstring is on the line after the opening quotes instead of on the same line as them.
    # """
    # We've discussed and concluded that we consider this to be a valid style choice.
    "D212", # Multi-line docstring summary should start at the first line
]

[tool.ruff.lint.isort]
force-sort-within-sections = true

[tool.ruff.lint.pycodestyle]
# Combine line-length and max-line-length to emulate flake8-bugbear's B950 rule.
# The formatter uses line-length, but rule E501 won't complain until a line hits 111.
max-line-length = 110

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"nautobot_fsus/**/__init__.py" = [
    "D",
]
"nautobot_fsus/migrations/*" = [
    "D",
]
"nautobot_fsus/tests/*" = [
    "D",
    "S"
]

[tool.pydocstyle]
convention = "google"
inherit = false
match = "(?!__init__).*\\.py"
match-dir = "(?!tests|migrations|development)[^\\.].*"
# D105 enforces docstrings for magic methods, e.g. __str__(). It seems unnecessary.
# D200 and D212 are enabled by default in google convention, and complains if we have a docstring like:
# """
# My docstring is on the line after the opening quotes instead of on the same line as them.
# """
# We've discussed and concluded that we consider this to be a valid style choice.
add_ignore = ["D105", "D200", "D212"]

[tool.mypy]
cache_dir = ".cache/mypy_cache"
exclude = "development/"
warn_return_any = true
warn_unused_configs = true

# Sadly, Nautobot has no type hints in the code base.
[[tool.mypy.overrides]]
module = [
    "django_filters.*",
    "django_jinja.*",
    "django_tables2.*",
    "nautobot.*",
    "rest_framework.*",
    "taggit.*",
    "xmlrunner.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
addopts = "-vv --doctest-modules"
cache_dir = ".cache/pytest_cache"

[tool.coverage.report]
show_missing = true
include = ["nautobot_fsus/*"]
omit = [
    "nautobot_fsus/management/*",
    "nautobot_fsus/migrations/*",
    "nautobot_fsus/tests/*",
]

[tool.coverage.xml]
output = "coverage.xml"
